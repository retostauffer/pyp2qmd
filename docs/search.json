[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "pyp2qmd Package Documentation",
    "section": "",
    "text": "This page has been automatically generated by pyp2qmd (Python package documentation to quarto), converting the docstrings of all loaded functions and methods available via pyp2qmd into quarto markdown files (.qmd).\npyp2qmd is used to document itself creating the documentation you are currently looking at. Created as follows:\npyp2qmd init --package pyp2qmd --output_dir ../docs --overwrite\n\nFunction reference\nContains the documentation/reference of all functions, including description, usage, arguments, exceptions, as well as evaluated examples.\n\n\nClass reference\nThe documentation/reference of all classes including description, usge, arguments, methods, exceptions, and evaluated examples (if any).\nFor each method listed on the class reference page, a quarto markdown file is generated as well, altough not listed in the navigation. The documentation can be accessed by visiting the class reference, and then click on the method of interest.\nAutomatically generated: 2024-05-06 18:26."
  },
  {
    "objectID": "man/pyp2qmd.ManPage.ManPage.isfunction.html",
    "href": "man/pyp2qmd.ManPage.ManPage.isfunction.html",
    "title": "WARNING(short_description missing)",
    "section": "",
    "text": "WARNING(long_description missing)\n\nUsage\nManPage.isfunction()"
  },
  {
    "objectID": "man/pyp2qmd.DocConverter.DocConverter.update_quarto_yml.html",
    "href": "man/pyp2qmd.DocConverter.DocConverter.update_quarto_yml.html",
    "title": "Update Quarto",
    "section": "",
    "text": "Description\nUpdates the _quarto.yml file by adding all classes and functions to the website sidebar content (navigation). This is only done if the quarto file has just been initialized and man pages have been crated.\n\n\nUsage\nDocConverter.update_quarto_yml()"
  },
  {
    "objectID": "man/pyp2qmd.DocConverter.DocConverter.document.html",
    "href": "man/pyp2qmd.DocConverter.DocConverter.document.html",
    "title": "Document All",
    "section": "",
    "text": "Description\nDocuments all exported classes and functions. Convenience function, calls :py:meth:document_functions and :py:meth:document_classes.\n\n\nUsage\nDocConverter.document()"
  },
  {
    "objectID": "man/pyp2qmd.ManPage.ManPage.getmembers.html",
    "href": "man/pyp2qmd.ManPage.ManPage.getmembers.html",
    "title": "WARNING(short_description missing)",
    "section": "",
    "text": "WARNING(long_description missing)\n\nUsage\nManPage.getmembers()"
  },
  {
    "objectID": "man/pyp2qmd.Config.Config.setup.html",
    "href": "man/pyp2qmd.Config.Config.setup.html",
    "title": "Config Setup",
    "section": "",
    "text": "Description\naction = \"init\" initializes the auto-generated documentation and will automatically create the quarto website template including a _quarto.yml file and pyp.sass. Will thorw an exception one of these files already exists, except if the user allows for overwrite = True (take care, the current content of _quarto.yml will be overwritten).\naction = \"document\" parses the python package classes and functions and will update the man pages. It will, however, not overwrite _quarto.yml. When used the first time, it will also initialize the output folder structure and create the required files (_quarto.yml, pyp.sass) similar to the init action.\n\n\nUsage\nConfig.setup(action, package, quarto_dir='_quarto',             man_dir='man', output_dir='_site',             overwrite=False, include_hidden=False,             docstringstyle='GOOGLE', silent=False)\n\n\nArguments\n\n\nactionstr\n\n\nAction to be executed. One of \"init\" or \"document\", see method description.\n\n\npackagestr\n\n\nName of the package which should be documented.\n\n\nquarto_dirstr\n\n\nOutput directory, defaults to \"_quarto\".\n\n\nman_dirstr\n\n\nName of the directory for the manual pages (subfolder inside quarto_dir), defaults to \"man\".\n\n\noutput_dirstr\n\n\nDirectory for the rendered quarto website, used as output-dir target in _quarto.yml, relative to quarto_dir. Defaults to \"_site\".\n\n\noverwritebool\n\n\nOnly used if action = \"init\", see method description.\n\n\ninclude_hiddenbool\n\n\nIf False (default), classes, functions, and methods starting with an underscore will not be documented (no quarto man pages will be crated). Dunder classes, functions, and methods are always excluded.\n\n\ndocstringstylestr\n\n\nStyle of the docstrings in the package, must be one of the allowed types of the docstring_parser package (AUTO, EPYDOC, GOOGLE, NUMPYDOC, REST), defaults to \"GOOGLE\"; not case sensitive.\n\n\nsilentbool\n\n\nIf False (default) some output will be produced when rendering the man pages. Can be specified to silence the execution.\n\n\n\n\nRaises\n\n\nTypeError: If the inputs are not of the expected type.\n\nValueError: If action is not one of the allowed ones."
  },
  {
    "objectID": "man/pyp2qmd.DocConverter.DocConverter.get_functions.html",
    "href": "man/pyp2qmd.DocConverter.DocConverter.get_functions.html",
    "title": "Get Exported Functions",
    "section": "",
    "text": "WARNING(long_description missing)\n\nUsage\nDocConverter.get_functions(names_only=False)\n\n\nArguments\n\n\nnames_onlybool\n\n\nIf False (default) a list of tuples is returned, if set True a list of str (name of classes only).\n\n\n\n\nRaises\n\n\nException: If there are issues extracting functions via inspect."
  },
  {
    "objectID": "man/pyp2qmd.demofunctions.demofun_wrong.html",
    "href": "man/pyp2qmd.demofunctions.demofun_wrong.html",
    "title": "Demo Function: Invalid Docstring",
    "section": "",
    "text": "Description\nThis function is used for testing/demonstrating the DocConverter. Docstring not properly specified, missing documentation for arguments, and return.\n\n\nUsage\ndemofun_wrong(x='demo', *args, **kwargs)\n\n\nArguments\n\n\nWARNING(missing argument definition “x” in docstring)\n\n\nWARNING(missing argument definition “args” in docstring)\n\n\nWARNING(missing argument definition “kwargs” in docstring)"
  },
  {
    "objectID": "man/pyp2qmd.ManPage.ManPage.signature.html",
    "href": "man/pyp2qmd.ManPage.ManPage.signature.html",
    "title": "WARNING(short_description missing)",
    "section": "",
    "text": "WARNING(long_description missing)\n\nUsage\nManPage.signature(remove_self=None, max_length=200)\n\n\nArguments\n\n\nWARNING(missing argument definition “remove_self” in docstring)\n\n\nWARNING(missing argument definition “max_length” in docstring)"
  },
  {
    "objectID": "man/pyp2qmd.ManPage.ManPage.get.html",
    "href": "man/pyp2qmd.ManPage.ManPage.get.html",
    "title": "WARNING(short_description missing)",
    "section": "",
    "text": "WARNING(long_description missing)\n\nUsage\nManPage.get(attr)\n\n\nArguments\n\n\nWARNING(missing argument definition “attr” in docstring)"
  },
  {
    "objectID": "man/pyp2qmd.ManPage.ManPage.fullname.html",
    "href": "man/pyp2qmd.ManPage.ManPage.fullname.html",
    "title": "WARNING(short_description missing)",
    "section": "",
    "text": "WARNING(long_description missing)\n\nUsage\nManPage.fullname()"
  },
  {
    "objectID": "man/pyp2qmd.ManPage.ManPage.write_qmd.html",
    "href": "man/pyp2qmd.ManPage.ManPage.write_qmd.html",
    "title": "WARNING(short_description missing)",
    "section": "",
    "text": "WARNING(long_description missing)\n\nUsage\nManPage.write_qmd()"
  },
  {
    "objectID": "man/pyp2qmd.Config.Config.get.html",
    "href": "man/pyp2qmd.Config.Config.get.html",
    "title": "Get Attribute",
    "section": "",
    "text": "Description\nAllows to access attributes from the object. get(\"foo\") will try to return self._foo if it exists.\n\n\nUsage\nConfig.get(what)\n\n\nArguments\n\n\nwhatstr\n\n\nName of the attribute (without leading underscore).\n\n\n\n\nReturn\nWhatever is stored on the attribute.\n\n\nRaises\n\n\nTypeError: If argument what is not str.\n\nValueError: If the argument _{what} does not exist."
  },
  {
    "objectID": "man/pyp2qmd.DocConverter.DocConverter.document_classes.html",
    "href": "man/pyp2qmd.DocConverter.DocConverter.document_classes.html",
    "title": "Document Classes",
    "section": "",
    "text": "Description\nGenerates man pages for all exported classes.\n\n\nUsage\nDocConverter.document_classes()"
  },
  {
    "objectID": "man/pyp2qmd.Config.Config.is_set_up.html",
    "href": "man/pyp2qmd.Config.Config.is_set_up.html",
    "title": "Object Set Up Properly?",
    "section": "",
    "text": "WARNING(long_description missing)\n\nUsage\nConfig.is_set_up()\n\n\nReturn\nReturns True if the object has been set up properly (see main class description) and False otherwise."
  },
  {
    "objectID": "man/pyp2qmd.Config.Config.html",
    "href": "man/pyp2qmd.Config.Config.html",
    "title": "pyp2qmd Configuration",
    "section": "",
    "text": "Description\nCustom class for handling the required arguments for pyp2qmd which has two modes: If argparse = False (default) on initialization, the user must use the :py:meth:setup method to specify the required arguments.\nIf argparse = True user inputs will be parsed via the argparse package and automatically handed over to the :py:meth:setup method. This is used when called via console (console arguments).\n\n\nUsage\nConfig(argparse=False)\n\n\nArguments\n\n\nargparsebool\n\n\nFalse by default, the user has to use the .setup() method. If set to True it will try to parse input arguments via argparse.\n\n\n\n\nMethods\n\n\nConfig.get(what)\n\n\nGet Attribute\n\n\nConfig.is_set_up()\n\n\nObject Set Up Properly?\n\n\nConfig.setup(action, package, quarto_dir=’_quarto’, man_dir=‘man’, output_dir=’_site’, overwrite=False, include_hidden=False, docstringstyle=‘GOOGLE’, silent=False)\n\n\nConfig Setup"
  },
  {
    "objectID": "man/pyp2qmd.demofunctions.demofun_allfine.html",
    "href": "man/pyp2qmd.demofunctions.demofun_allfine.html",
    "title": "Demo Function: All fine",
    "section": "",
    "text": "Description\nThis function is used for testing/demonstrating the DocConverter. Docstring all fine, properly includes a title, description, all arguments are documented as well as the (dummy) return and exceptions rased.\n\n\nUsage\ndemofun_allfine(x='demo', *args, **kwargs)\n\n\nArguments\n\n\nxstr\n\n\nDummy input argument, defaults to “demo”.\n\n\n*args\n\n\nTakes up all unnamed input arguments, unused.\n\n\n**kwargs\n\n\nTakes up all named arguments, unused.\n\n\n\n\nReturn\nSimply returns x at the end.\n\n\nRaises\n\n\nTypeError: If argument x is not str."
  },
  {
    "objectID": "man/pyp2qmd.DocConverter.DocConverter.html",
    "href": "man/pyp2qmd.DocConverter.DocConverter.html",
    "title": "Documentation Converter",
    "section": "",
    "text": "Description\nThis is the main class of the package which will extract the docstrings of all exported classes and functions of an installed python package, and convert them into quarto markdown files (thus pyp2qmd; python package to quarto markdown).\nThe Config contains all the required arguments/settings to perform this task and is, thus, the only reqired input argument.\n\n\nUsage\nDocConverter(config)\n\n\nArguments\n\n\nconfigConfig\n\n\nSee Config for details; must be set up properly.\n\n\n\n\nMethods\n\n\nDocConverter.config_get(what)\n\n\nGet Config Attribute\n\n\nDocConverter.document()\n\n\nDocument All\n\n\nDocConverter.document_classes()\n\n\nDocument Classes\n\n\nDocConverter.document_functions()\n\n\nDocument Functions\n\n\nDocConverter.get_classes(names_only=False)\n\n\nGet Exported Classes\n\n\nDocConverter.get_functions(names_only=False)\n\n\nGet Exported Functions\n\n\nDocConverter.navbar_add_page(src, dest, text)\n\n\nAdd Page to Navigation\n\n\nDocConverter.update_quarto_yml()\n\n\nUpdate Quarto\n\n\n\n\nRaises\n\n\nTypeError: If config is not of class Config.\n\nException: If config object is not set up properly.\n\nException: If the package which should be documented is not found (can’t be imported).\n\nValueError: If package docstring_parser has no DocstringStyle class matching the docstringstyle defined by the user (handled as ‘all upper case’)."
  },
  {
    "objectID": "man/pyp2qmd.ManPage.ManPage.html",
    "href": "man/pyp2qmd.ManPage.ManPage.html",
    "title": "Quarto Manual Page",
    "section": "",
    "text": "Description\nClass handling the creation of the quarto markdown (.qmd) manual pages.\n\n\nUsage\nManPage(name, obj, config, parent=None)\n\n\nArguments\n\n\nnamestr\n\n\nName of the function, class, or method.\n\n\nobjfunction or class\n\n\nThe function or class to be documented.\n\n\nconfigConfig\n\n\nObject of class Config.\n\n\nparentNone, str\n\n\nNone (default) if a class or function is documented. Used to document methods, in this case parent contains the name of the parent class as str.\n\n\n\n\nReturn\nInitializes an object of this class.\n\n\nMethods\n\n\nManPage.config_get(what)\n\n\nGet Config Argument\n\n\nManPage.fullname()\n\n\nWARNING(short_description missing)\n\n\nManPage.get(attr)\n\n\nWARNING(short_description missing)\n\n\nManPage.getmembers()\n\n\nWARNING(short_description missing)\n\n\nManPage.isclass()\n\n\nWARNING(short_description missing)\n\n\nManPage.isfunction()\n\n\nWARNING(short_description missing)\n\n\nManPage.quartofile()\n\n\nWARNING(short_description missing)\n\n\nManPage.signature(remove_self=None, max_length=200)\n\n\nWARNING(short_description missing)\n\n\nManPage.write_qmd()\n\n\nWARNING(short_description missing)"
  },
  {
    "objectID": "man/pyp2qmd.DocConverter.DocConverter.document_functions.html",
    "href": "man/pyp2qmd.DocConverter.DocConverter.document_functions.html",
    "title": "Document Functions",
    "section": "",
    "text": "Description\nGenerates man pages for all exported functions.\n\n\nUsage\nDocConverter.document_functions()"
  },
  {
    "objectID": "man/pyp2qmd.DocConverter.DocConverter.config_get.html",
    "href": "man/pyp2qmd.DocConverter.DocConverter.config_get.html",
    "title": "Get Config Attribute",
    "section": "",
    "text": "Description\nCalls the .get() method of the Config object as defined via config on class initialization. Will raise exceptions if not available (see Config for details).\n\n\nUsage\nDocConverter.config_get(what)\n\n\nArguments\n\n\nwhatstr\n\n\nAttribute to be returned."
  },
  {
    "objectID": "man/pyp2qmd.DocConverter.DocConverter.get_classes.html",
    "href": "man/pyp2qmd.DocConverter.DocConverter.get_classes.html",
    "title": "Get Exported Classes",
    "section": "",
    "text": "WARNING(long_description missing)\n\nUsage\nDocConverter.get_classes(names_only=False)\n\n\nArguments\n\n\nnames_onlybool\n\n\nIf False (default) a list of tuples is returned, if set True a list of str (name of classes only).\n\n\n\n\nRaises\n\n\nException: If there are issues extracting classes via inspect."
  },
  {
    "objectID": "man/pyp2qmd.ManPage.ManPage.quartofile.html",
    "href": "man/pyp2qmd.ManPage.ManPage.quartofile.html",
    "title": "WARNING(short_description missing)",
    "section": "",
    "text": "WARNING(long_description missing)\n\nUsage\nManPage.quartofile()"
  },
  {
    "objectID": "man/pyp2qmd.ManPage.ManPage.isclass.html",
    "href": "man/pyp2qmd.ManPage.ManPage.isclass.html",
    "title": "WARNING(short_description missing)",
    "section": "",
    "text": "WARNING(long_description missing)\n\nUsage\nManPage.isclass()"
  },
  {
    "objectID": "man/pyp2qmd.demofunctions.demofun_wrong2.html",
    "href": "man/pyp2qmd.demofunctions.demofun_wrong2.html",
    "title": "WARNING(short_description missing)",
    "section": "",
    "text": "WARNING(long_description missing)\n\nUsage\ndemofun_wrong2(x='demo', *args, **kwargs)\n\n\nArguments\n\n\nWARNING(missing argument definition “x” in docstring)\n\n\nWARNING(missing argument definition “args” in docstring)\n\n\nWARNING(missing argument definition “kwargs” in docstring)"
  },
  {
    "objectID": "man/pyp2qmd.ManPage.ManPage.config_get.html",
    "href": "man/pyp2qmd.ManPage.ManPage.config_get.html",
    "title": "Get Config Argument",
    "section": "",
    "text": "Description\nInterfaces the .get() method of the Config object.\n\n\nUsage\nManPage.config_get(what)\n\n\nArguments\n\n\nwhatstr\n\n\nName of the attribute.\n\n\n\n\nReturn\nWhatever is stored on the attribute."
  },
  {
    "objectID": "man/pyp2qmd.DocConverter.DocConverter.navbar_add_page.html",
    "href": "man/pyp2qmd.DocConverter.DocConverter.navbar_add_page.html",
    "title": "Add Page to Navigation",
    "section": "",
    "text": "Description\nAdds page to website navbar left. Will be added to the _quarto.yml file if not yet included. Will place the source file (qmd) in the quarto output folder under name dest and linked in the navigation as text.\n\n\nUsage\nDocConverter.navbar_add_page(src, dest, text)\n\n\nArguments\n\n\nsrcstr\n\n\nPath to an existing quarto file, must end in .qmd.\n\n\ndeststr\n\n\nTarget file name, name only, no path. Will be placed in the quarto_dir as specified in the config (see DocConverter).\n\n\ntextstr\n\n\nName used in the navigation.\n\n\n\n\nRaises\n\n\nTypeError: If src, dest, text are not str.\n\nValueError: If src and dest do not end in .qmd\n\nValueError: If dest is a path, not only the name of the target quarto file.\n\nFileNotFoundError: If src does not exist.\n\nException: If dest already exists but overwrite is set False (see DocConverter).\n\nException: if src cannot be copied to destination."
  },
  {
    "objectID": "test.html",
    "href": "test.html",
    "title": "pyp2qmd Test Page",
    "section": "",
    "text": "This is just a test."
  }
]