[
  {
    "objectID": "getting_started.html",
    "href": "getting_started.html",
    "title": "Getting Started",
    "section": "",
    "text": "The pyp2qmd package provides (i) a console tool to set up a skeleton of the documentation, but also (ii) allows to write a small Python script to do so. The latter allows for somewhat more control (tough limited at the moment)."
  },
  {
    "objectID": "getting_started.html#documentation-skeleton-via-console",
    "href": "getting_started.html#documentation-skeleton-via-console",
    "title": "Getting Started",
    "section": "Documentation skeleton via console",
    "text": "Documentation skeleton via console\nThe package is shipped with an executable called pyp2qmd, providing a series of options to set up the basic structure (sekelton) of a Python package quarto documentation.\nIt will load an existing package and extract all exported functions and classes (from the main module), creating quarto markdown manuals for each of them. Alongside the manuals a basic [quarto][quarto] website structure is set up.\n\nUsageShow usage help\n\n\nThe pyp2qmd executable provides a series of arguments whereof two are mandatory, namely action and -p/--package. For details, see pyp2qmd --help (included in the tab ‘Show usage help’).\n\naction: One of init (initialize documentation skeleton) or document (update documentation).\n-p/--package: Name of the package to be documented.\n\nThus, in the simplest case the command looks as follows:\npyp2qmd init --package &lt;name_of_package&gt;\nAll other arguments have defaults (see --help) which can be adjusted if needed.\n\n\npyp2qmd --help\n\n\nTraceback (most recent call last):\n  File \"/opt/hostedtoolcache/Python/3.11.9/x64/bin/pyp2qmd\", line 33, in &lt;module&gt;\n    sys.exit(load_entry_point('pyp2qmd==0.1.0', 'console_scripts', 'pyp2qmd')())\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.11.9/x64/bin/pyp2qmd\", line 25, in importlib_load_entry_point\n    return next(matches).load()\n           ^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/importlib/metadata/__init__.py\", line 202, in load\n    module = import_module(match.group('module'))\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/importlib/__init__.py\", line 126, in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"&lt;frozen importlib._bootstrap&gt;\", line 1204, in _gcd_import\n  File \"&lt;frozen importlib._bootstrap&gt;\", line 1176, in _find_and_load\n  File \"&lt;frozen importlib._bootstrap&gt;\", line 1126, in _find_and_load_unlocked\n  File \"&lt;frozen importlib._bootstrap&gt;\", line 241, in _call_with_frames_removed\n  File \"&lt;frozen importlib._bootstrap&gt;\", line 1204, in _gcd_import\n  File \"&lt;frozen importlib._bootstrap&gt;\", line 1176, in _find_and_load\n  File \"&lt;frozen importlib._bootstrap&gt;\", line 1140, in _find_and_load_unlocked\nModuleNotFoundError: No module named 'pyp2qmd.bin'\n\n\n\n\n\n\nFile structure created\nThis will create the following structure (for --package pyp2qmd):\n\n\n_quarto\n\n0 directories, 0 files\n\n\nTraceback (most recent call last):\n  File \"/opt/hostedtoolcache/Python/3.11.9/x64/bin/pyp2qmd\", line 33, in &lt;module&gt;\n    sys.exit(load_entry_point('pyp2qmd==0.1.0', 'console_scripts', 'pyp2qmd')())\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.11.9/x64/bin/pyp2qmd\", line 25, in importlib_load_entry_point\n    return next(matches).load()\n           ^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/importlib/metadata/__init__.py\", line 202, in load\n    module = import_module(match.group('module'))\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/importlib/__init__.py\", line 126, in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"&lt;frozen importlib._bootstrap&gt;\", line 1204, in _gcd_import\n  File \"&lt;frozen importlib._bootstrap&gt;\", line 1176, in _find_and_load\n  File \"&lt;frozen importlib._bootstrap&gt;\", line 1126, in _find_and_load_unlocked\n  File \"&lt;frozen importlib._bootstrap&gt;\", line 241, in _call_with_frames_removed\n  File \"&lt;frozen importlib._bootstrap&gt;\", line 1204, in _gcd_import\n  File \"&lt;frozen importlib._bootstrap&gt;\", line 1176, in _find_and_load\n  File \"&lt;frozen importlib._bootstrap&gt;\", line 1140, in _find_and_load_unlocked\nModuleNotFoundError: No module named 'pyp2qmd.bin'\n\n\nThe file _quarto.yml contains the template for the quarto website skeleton, index.qmd a template of the websites entry page (home). In addition, pyp.scss with a series of style adjustments.\nIn addition, a folder is created containing the man pages (default --man_dir name is \"man\") for all exported functions and classes as well as their methods. To render the website simply execute:\n(cd _quarto && quarto render)\nThis will render the website and output a series of static HTML files into the output_folder (_quarto/_site by default)."
  },
  {
    "objectID": "getting_started.html#documentation-via-script",
    "href": "getting_started.html#documentation-via-script",
    "title": "Getting Started",
    "section": "Documentation via script",
    "text": "Documentation via script\nAlternatively, a small custom Python script can be written to create the documentation. This allows to add additional pages to the quarto website top navigation.\nThe script below is creating the documentation you are reading currently.\n#!/usr/bin/env python\n\ndef main():\n    from os.path import join, basename\n    from pyp2qmd import Config, DocConverter\n\n    # Initialize Config; parses user arguments via argparse\n    config  = Config()\n    config.setup(action = \"init\", package = \"pyp2qmd\",\n                 output_dir = \"../docs\", overwrite = True)\n\n    # Initialize DocConverter; creates _quarto.yml,\n    # pyp.sass, and index.qmd if needed.\n    docconv = DocConverter(config)\n\n    docconv.document()\n    docconv.update_quarto_yml()\n\n    # Adding test page\n    src = join(\"make_docs\", \"getting_started.qmd\")\n    docconv.navbar_add_page(src, basename(src), \"Getting started\")\n    src = join(\"make_docs\", \"designg_philosphy.qmd\")\n    docconv.navbar_add_page(src, basename(src), \"Design philosophy\")\n\nif __name__ == \"__main__\":\n    main()"
  },
  {
    "objectID": "man/pyp2qmd.ManPage.ManPage.getmembers.html",
    "href": "man/pyp2qmd.ManPage.ManPage.getmembers.html",
    "title": "WARNING(short_description missing)",
    "section": "",
    "text": "WARNING(long_description missing)\n\nUsage\nManPage.getmembers()"
  },
  {
    "objectID": "man/pyp2qmd.ManPage.ManPage.quartofile.html",
    "href": "man/pyp2qmd.ManPage.ManPage.quartofile.html",
    "title": "WARNING(short_description missing)",
    "section": "",
    "text": "WARNING(long_description missing)\n\nUsage\nManPage.quartofile()"
  },
  {
    "objectID": "man/pyp2qmd.ManPage.ManPage.isclass.html",
    "href": "man/pyp2qmd.ManPage.ManPage.isclass.html",
    "title": "WARNING(short_description missing)",
    "section": "",
    "text": "WARNING(long_description missing)\n\nUsage\nManPage.isclass()"
  },
  {
    "objectID": "man/pyp2qmd.DocConverter.DocConverter.html",
    "href": "man/pyp2qmd.DocConverter.DocConverter.html",
    "title": "Documentation Converter",
    "section": "",
    "text": "Description\nThis is the main class of the package which will extract the docstrings of all exported classes and functions of an installed python package, and convert them into quarto markdown files (thus pyp2qmd; python package to quarto markdown).\nThe Config contains all the required arguments/settings to perform this task and is, thus, the only reqired input argument.\n\n\nUsage\nDocConverter(config)\n\n\nArguments\n\n\nescape(config)Config\n\n\nescape(See Config for details; must be set up properly.)\n\n\n\n\nMethods\n\n\nDocConverter.config_get(what)\n\n\nGet Config Attribute\n\n\nDocConverter.document()\n\n\nDocument All\n\n\nDocConverter.document_classes()\n\n\nDocument Classes\n\n\nDocConverter.document_functions()\n\n\nDocument Functions\n\n\nDocConverter.get_classes(names_only=False)\n\n\nGet Exported Classes\n\n\nDocConverter.get_functions(names_only=False)\n\n\nGet Exported Functions\n\n\nDocConverter.navbar_add_menu(menu)\n\n\nAdd Dropdown Menu to Navigation\n\n\nDocConverter.navbar_add_page(src, dest, text, menu=None)\n\n\nAdd Page to Navigation\n\n\nDocConverter.update_quarto_yml()\n\n\nUpdate Quarto\n\n\n\n\nRaises\n\n\nTypeError: If config is not of class Config.\n\nException: If config object is not set up properly.\n\nException: If the package which should be documented is not found (can't be imported).\n\nValueError: If package docstring_parser has no DocstringStyle class matching the docstringstyle defined by the user (handled as 'all upper case').",
    "crumbs": [
      "Home",
      "Class references",
      "DocConverter"
    ]
  },
  {
    "objectID": "man/pyp2qmd.DocConverter.DocConverter.document_functions.html",
    "href": "man/pyp2qmd.DocConverter.DocConverter.document_functions.html",
    "title": "Document Functions",
    "section": "",
    "text": "Description\nGenerates man pages for all exported functions.\n\n\nUsage\nDocConverter.document_functions()"
  },
  {
    "objectID": "man/pyp2qmd.ManPage.ManPage.html",
    "href": "man/pyp2qmd.ManPage.ManPage.html",
    "title": "Quarto Manual Page",
    "section": "",
    "text": "Description\nClass handling the creation of the quarto markdown (.qmd) manual pages.\n\n\nUsage\nManPage(name, obj, config, parent=None)\n\n\nArguments\n\n\nescape(name)str\n\n\nescape(Name of the function, class, or method.)\n\n\nescape(obj)function or class\n\n\nescape(The function or class to be documented.)\n\n\nescape(config)Config\n\n\nescape(Object of class Config.)\n\n\nescape(parent)None, str\n\n\nescape(None (default) if a class or function is documented. Used to document methods, in this case parent contains the name of the parent class as str.)\n\n\n\n\nReturn\nInitializes an object of this class.\n\n\nMethods\n\n\nManPage.config_get(what)\n\n\nGet Config Argument\n\n\nManPage.fullname()\n\n\nWARNING(short_description missing)\n\n\nManPage.get(attr)\n\n\nWARNING(short_description missing)\n\n\nManPage.getmembers()\n\n\nWARNING(short_description missing)\n\n\nManPage.isclass()\n\n\nWARNING(short_description missing)\n\n\nManPage.isfunction()\n\n\nWARNING(short_description missing)\n\n\nManPage.quartofile()\n\n\nWARNING(short_description missing)\n\n\nManPage.signature(remove_self=None, max_length=200)\n\n\nWARNING(short_description missing)\n\n\nManPage.write_qmd()\n\n\nWARNING(short_description missing)",
    "crumbs": [
      "Home",
      "Class references",
      "ManPage"
    ]
  },
  {
    "objectID": "man/pyp2qmd.DocConverter.DocConverter.get_functions.html",
    "href": "man/pyp2qmd.DocConverter.DocConverter.get_functions.html",
    "title": "Get Exported Functions",
    "section": "",
    "text": "WARNING(long_description missing)\n\nUsage\nDocConverter.get_functions(names_only=False)\n\n\nArguments\n\n\nescape(names_only)bool\n\n\nescape(If False (default) a list of tuples is returned, if set True a list of str (name of classes only).)\n\n\n\n\nRaises\n\n\nException: If there are issues extracting functions via inspect."
  },
  {
    "objectID": "man/pyp2qmd.DocConverter.DocConverter.update_quarto_yml.html",
    "href": "man/pyp2qmd.DocConverter.DocConverter.update_quarto_yml.html",
    "title": "Update Quarto",
    "section": "",
    "text": "Description\nUpdates the _quarto.yml file by adding all classes and functions to the website sidebar content (navigation). This is only done if the quarto file has just been initialized and man pages have been crated.\n\n\nUsage\nDocConverter.update_quarto_yml()"
  },
  {
    "objectID": "man/pyp2qmd.ManPage.ManPage.fullname.html",
    "href": "man/pyp2qmd.ManPage.ManPage.fullname.html",
    "title": "WARNING(short_description missing)",
    "section": "",
    "text": "WARNING(long_description missing)\n\nUsage\nManPage.fullname()"
  },
  {
    "objectID": "man/pyp2qmd.demofunctions.demofun_wrong.html",
    "href": "man/pyp2qmd.demofunctions.demofun_wrong.html",
    "title": "Demo Function: Invalid Docstring",
    "section": "",
    "text": "Description\nThis function is used for testing/demonstrating the DocConverter. Docstring not properly specified, missing documentation for arguments, and return.\n\n\nUsage\ndemofun_wrong(x='demo', *args, **kwargs)\n\n\nArguments\n\n\nWARNING(missing argument definition “x” in docstring)\n\n\nWARNING(missing argument definition “args” in docstring)\n\n\nWARNING(missing argument definition “kwargs” in docstring)",
    "crumbs": [
      "Home",
      "Function references",
      "demofun_wrong"
    ]
  },
  {
    "objectID": "man/pyp2qmd.DocConverter.DocConverter.document_classes.html",
    "href": "man/pyp2qmd.DocConverter.DocConverter.document_classes.html",
    "title": "Document Classes",
    "section": "",
    "text": "Description\nGenerates man pages for all exported classes.\n\n\nUsage\nDocConverter.document_classes()"
  },
  {
    "objectID": "man/pyp2qmd.ManPage.ManPage.config_get.html",
    "href": "man/pyp2qmd.ManPage.ManPage.config_get.html",
    "title": "Get Config Argument",
    "section": "",
    "text": "Description\nInterfaces the .get() method of the Config object.\n\n\nUsage\nManPage.config_get(what)\n\n\nArguments\n\n\nescape(what)str\n\n\nescape(Name of the attribute.)\n\n\n\n\nReturn\nWhatever is stored on the attribute."
  },
  {
    "objectID": "man/pyp2qmd.ManPage.ManPage.get.html",
    "href": "man/pyp2qmd.ManPage.ManPage.get.html",
    "title": "WARNING(short_description missing)",
    "section": "",
    "text": "WARNING(long_description missing)\n\nUsage\nManPage.get(attr)\n\n\nArguments\n\n\nWARNING(missing argument definition “attr” in docstring)"
  },
  {
    "objectID": "design_philosophy.html",
    "href": "design_philosophy.html",
    "title": "Design Philosophy",
    "section": "",
    "text": "The pyp2qmd package comes with three classes:"
  },
  {
    "objectID": "design_philosophy.html#config-class",
    "href": "design_philosophy.html#config-class",
    "title": "Design Philosophy",
    "section": "Config class",
    "text": "Config class\nCan be used in two differnet ways: Parsing arguments via argparse or set up via script. If argparse = False an empty object is initialized and the user must call Config.setup to specify all required (as well as optional) arguments/settings.\nIf argparse = True the package will use argparse to parse the users inputs.\nThis object is then forwarded to both the DocConverter class as well as the ManPage in order to do their job."
  },
  {
    "objectID": "design_philosophy.html#document-converter-class",
    "href": "design_philosophy.html#document-converter-class",
    "title": "Design Philosophy",
    "section": "Document converter class",
    "text": "Document converter class\nOn initialization this class creates the output folders as well as the basic structure of the quarto website, including _quarto.yml, pyp.scss and index.qmd. If action is set to \"document\" and at least one of these files already exists an error will be thrown to avoid overwriting them which could result in loss of data if the user already adjusted them manually.\nFor testing (or fully automatically created documentations) action can be set to \"init\" with overwrite = True to force overwrite files if existing.\nThe class provides a series of methods which are not explained here in detail (see class documentation for more information).\nThe main (most important) method is .document() which documents all functions and classes and creates the quarto markdown files stored in the man_dir folder."
  },
  {
    "objectID": "design_philosophy.html#manual-page-class",
    "href": "design_philosophy.html#manual-page-class",
    "title": "Design Philosophy",
    "section": "Manual page class",
    "text": "Manual page class\nCalled by the DocConverter class, handles the conversion from Python docstrings to quarto markdown. Typically not used by end users."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "pyp2qmd Package Documentation",
    "section": "",
    "text": "This page has been automatically generated by pyp2qmd (Python package documentation to quarto), converting the docstrings of all loaded functions and methods available via pyp2qmd into quarto markdown files (.qmd).\n\nBasic call\nThe basic structure can be set up using:\npyp2qmd init --package pyp2qmd --output_dir ../docs --overwrite\n(cd _quarto && quarto render)\n\n\nAdditional pages on initialization\npyp2qmd is used to document itself creating the documentation you are currently looking at using a small script which adds a series of pages on initialization. The script can be found in the repository, see:\n\nhttps://github.com/retostauffer/pyp2qmd/make_docs/main.py\n\n\n\nFunction reference\nContains the documentation/reference of all functions, including description, usage, arguments, exceptions, as well as evaluated examples.\n\n\nClass reference\nThe documentation/reference of all classes including description, usge, arguments, methods, exceptions, and evaluated examples (if any).\nFor each method listed on the class reference page, a quarto markdown file is generated as well, altough not listed in the navigation. The documentation can be accessed by visiting the class reference, and then click on the method of interest.\nAutomatically generated: 2024-05-16 15:52."
  },
  {
    "objectID": "man/pyp2qmd.Config.Config.html",
    "href": "man/pyp2qmd.Config.Config.html",
    "title": "pyp2qmd Configuration",
    "section": "",
    "text": "Description\nCustom class for handling the required arguments for pyp2qmd which has two modes: If argparse = False (default) on initialization, the user must use the :py:meth:setup method to specify the required arguments.\nIf argparse = True user inputs will be parsed via the argparse package and automatically handed over to the :py:meth:setup method. This is used when called via console (console arguments).\n\n\nUsage\nConfig(argparse=False)\n\n\nArguments\n\n\nescape(argparse)bool\n\n\nescape(False by default, the user has to use the .setup() method. If set to True it will try to parse input arguments via argparse.)\n\n\n\n\nMethods\n\n\nConfig.get(what)\n\n\nGet Attribute\n\n\nConfig.is_set_up()\n\n\nObject Set Up Properly?\n\n\nConfig.setup(action, package, quarto_dir='_quarto', man_dir='man', output_dir='_site', overwrite=False, include_hidden=False, docstringstyle='GOOGLE', silent=False)\n\n\nConfig Setup",
    "crumbs": [
      "Home",
      "Class references",
      "Config"
    ]
  },
  {
    "objectID": "man/pyp2qmd.DocConverter.DocConverter.navbar_add_page.html",
    "href": "man/pyp2qmd.DocConverter.DocConverter.navbar_add_page.html",
    "title": "Add Page to Navigation",
    "section": "",
    "text": "Description\nAdds page to website navbar left. Will be added to the _quarto.yml file if not yet included. Will place the source file (qmd) in the quarto output folder under name dest and linked in the navigation as text.\n\n\nUsage\nDocConverter.navbar_add_page(src, dest, text,                             menu=None)\n\n\nArguments\n\n\nescape(src)str\n\n\nescape(Path to an existing quarto file, must end in .qmd.)\n\n\nescape(dest)str\n\n\nescape(Name or path for target quarto file. If path, the directory will be created inside quarto_dir as specified in the config (see DocConverter) if not yet existing.)\n\n\nescape(text)str\n\n\nescape(Name used in the navigation.)\n\n\nescape(menu)None, str\n\n\nescape(Must be None if pages are added. If set, it is expected that a menu with this name exists. The page will then be added to that menu if not already in there.)\n\n\n\n\nRaises\n\n\nTypeError: If src, dest, text are not str.\n\nValueError: If src and dest do not end in .qmd\n\nValueError: If dest is a path, not only the name of the target quarto file.\n\nFileNotFoundError: If src does not exist.\n\nTypeError: If menu is not None nor str.\n\nException: If dest already exists but overwrite is set False (see DocConverter).\n\nException: if src cannot be copied to destination."
  },
  {
    "objectID": "man/pyp2qmd.ManPage.ManPage.isfunction.html",
    "href": "man/pyp2qmd.ManPage.ManPage.isfunction.html",
    "title": "WARNING(short_description missing)",
    "section": "",
    "text": "WARNING(long_description missing)\n\nUsage\nManPage.isfunction()"
  },
  {
    "objectID": "man/pyp2qmd.DocConverter.DocConverter.document.html",
    "href": "man/pyp2qmd.DocConverter.DocConverter.document.html",
    "title": "Document All",
    "section": "",
    "text": "Description\nDocuments all exported classes and functions. Convenience function, calls :py:meth:document_functions and :py:meth:document_classes.\n\n\nUsage\nDocConverter.document()"
  },
  {
    "objectID": "man/pyp2qmd.Config.Config.setup.html",
    "href": "man/pyp2qmd.Config.Config.setup.html",
    "title": "Config Setup",
    "section": "",
    "text": "Description\naction = \"init\" initializes the auto-generated documentation and will automatically create the quarto website template including a _quarto.yml file and pyp.sass. Will thorw an exception one of these files already exists, except if the user allows for overwrite = True (take care, the current content of _quarto.yml will be overwritten).\naction = \"document\" parses the python package classes and functions and will update the man pages. It will, however, not overwrite _quarto.yml. When used the first time, it will also initialize the output folder structure and create the required files (_quarto.yml, pyp.sass) similar to the init action.\n\n\nUsage\nConfig.setup(action, package,             quarto_dir='_quarto',             man_dir='man',             output_dir='_site',             overwrite=False, include_hidden=False,             docstringstyle='GOOGLE',             silent=False)\n\n\nArguments\n\n\nescape(action)str\n\n\nescape(Action to be executed. One of \"init\" or \"document\", see method description.)\n\n\nescape(package)str\n\n\nescape(Name of the package which should be documented.)\n\n\nescape(quarto_dir)str\n\n\nescape(Output directory, defaults to \"_quarto\".)\n\n\nescape(man_dir)str\n\n\nescape(Name of the directory for the manual pages (subfolder inside quarto_dir), defaults to \"man\".)\n\n\nescape(output_dir)str\n\n\nescape(Directory for the rendered quarto website, used as output-dir target in _quarto.yml, relative to quarto_dir. Defaults to \"_site\".)\n\n\nescape(overwrite)bool\n\n\nescape(Only used if action = \"init\", see method description.)\n\n\nescape(include_hidden)bool\n\n\nescape(If False (default), classes, functions, and methods starting with an underscore will not be documented (no quarto man pages will be crated). Dunder classes, functions, and methods are always excluded.)\n\n\nescape(docstringstyle)str\n\n\nescape(Style of the docstrings in the package, must be one of the allowed types of the docstring_parser package (AUTO, EPYDOC, GOOGLE, NUMPYDOC, REST), defaults to \"GOOGLE\"; not case sensitive.)\n\n\nescape(silent)bool\n\n\nescape(If False (default) some output will be produced when rendering the man pages. Can be specified to silence the execution.)\n\n\n\n\nRaises\n\n\nTypeError: If the inputs are not of the expected type.\n\nValueError: If action is not one of the allowed ones."
  },
  {
    "objectID": "man/pyp2qmd.demofunctions.demofun_allfine.html",
    "href": "man/pyp2qmd.demofunctions.demofun_allfine.html",
    "title": "Demo Function: All fine",
    "section": "",
    "text": "Description\nThis function is used for testing/demonstrating the DocConverter. Docstring all fine, properly includes a title, description, all arguments are documented as well as the (dummy) return and exceptions rased.\n\n\nUsage\ndemofun_allfine(x='demo', *args, **kwargs)\n\n\nArguments\n\n\nescape(x)str\n\n\nescape(Dummy input argument, defaults to “demo”.)\n\n\nescape(*args)\n\n\nescape(Takes up all unnamed input arguments, unused.)\n\n\nescape(**kwargs)\n\n\nescape(Takes up all named arguments, unused.)\n\n\n\n\nReturn\nSimply returns x at the end.\n\n\nRaises\n\n\nTypeError: If argument x is not str.",
    "crumbs": [
      "Home",
      "Function references",
      "demofun_allfine"
    ]
  },
  {
    "objectID": "man/pyp2qmd.Config.Config.is_set_up.html",
    "href": "man/pyp2qmd.Config.Config.is_set_up.html",
    "title": "Object Set Up Properly?",
    "section": "",
    "text": "WARNING(long_description missing)\n\nUsage\nConfig.is_set_up()\n\n\nReturn\nReturns True if the object has been set up properly (see main class description) and False otherwise."
  },
  {
    "objectID": "man/pyp2qmd.demofunctions.demofun_wrong2.html",
    "href": "man/pyp2qmd.demofunctions.demofun_wrong2.html",
    "title": "WARNING(short_description missing)",
    "section": "",
    "text": "WARNING(long_description missing)\n\nUsage\ndemofun_wrong2(x='demo', *args, **kwargs)\n\n\nArguments\n\n\nWARNING(missing argument definition “x” in docstring)\n\n\nWARNING(missing argument definition “args” in docstring)\n\n\nWARNING(missing argument definition “kwargs” in docstring)",
    "crumbs": [
      "Home",
      "Function references",
      "demofun_wrong2"
    ]
  },
  {
    "objectID": "man/pyp2qmd.DocConverter.DocConverter.navbar_add_menu.html",
    "href": "man/pyp2qmd.DocConverter.DocConverter.navbar_add_menu.html",
    "title": "Add Dropdown Menu to Navigation",
    "section": "",
    "text": "Description\nAdds a menu (dropdown menu) to the top navigation which can be populated with a series of pages. Will only be added if not yet existing.\n\n\nUsage\nDocConverter.navbar_add_menu(menu)\n\n\nArguments\n\n\nescape(menu)str\n\n\nescape(Name of the dropdown menu.)\n\n\n\n\nRaises\n\n\nTypeError: If menu is not str."
  },
  {
    "objectID": "man/pyp2qmd.ManPage.ManPage.signature.html",
    "href": "man/pyp2qmd.ManPage.ManPage.signature.html",
    "title": "WARNING(short_description missing)",
    "section": "",
    "text": "WARNING(long_description missing)\n\nUsage\nManPage.signature(remove_self=None, max_length=200)\n\n\nArguments\n\n\nWARNING(missing argument definition “remove_self” in docstring)\n\n\nWARNING(missing argument definition “max_length” in docstring)"
  },
  {
    "objectID": "man/pyp2qmd.Config.Config.get.html",
    "href": "man/pyp2qmd.Config.Config.get.html",
    "title": "Get Attribute",
    "section": "",
    "text": "Description\nAllows to access attributes from the object. get(\"foo\") will try to return self._foo if it exists.\n\n\nUsage\nConfig.get(what)\n\n\nArguments\n\n\nescape(what)str\n\n\nescape(Name of the attribute (without leading underscore).)\n\n\n\n\nReturn\nWhatever is stored on the attribute.\n\n\nRaises\n\n\nTypeError: If argument what is not str.\n\nValueError: If the argument _{what} does not exist."
  },
  {
    "objectID": "man/pyp2qmd.DocConverter.DocConverter.get_classes.html",
    "href": "man/pyp2qmd.DocConverter.DocConverter.get_classes.html",
    "title": "Get Exported Classes",
    "section": "",
    "text": "WARNING(long_description missing)\n\nUsage\nDocConverter.get_classes(names_only=False)\n\n\nArguments\n\n\nescape(names_only)bool\n\n\nescape(If False (default) a list of tuples is returned, if set True a list of str (name of classes only).)\n\n\n\n\nRaises\n\n\nException: If there are issues extracting classes via inspect."
  },
  {
    "objectID": "man/pyp2qmd.ManPage.ManPage.write_qmd.html",
    "href": "man/pyp2qmd.ManPage.ManPage.write_qmd.html",
    "title": "WARNING(short_description missing)",
    "section": "",
    "text": "WARNING(long_description missing)\n\nUsage\nManPage.write_qmd()"
  },
  {
    "objectID": "man/pyp2qmd.DocConverter.DocConverter.config_get.html",
    "href": "man/pyp2qmd.DocConverter.DocConverter.config_get.html",
    "title": "Get Config Attribute",
    "section": "",
    "text": "Description\nCalls the .get() method of the Config object as defined via config on class initialization. Will raise exceptions if not available (see Config for details).\n\n\nUsage\nDocConverter.config_get(what)\n\n\nArguments\n\n\nescape(what)str\n\n\nescape(Attribute to be returned.)"
  }
]